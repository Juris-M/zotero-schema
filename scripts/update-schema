#!/usr/bin/env node

// Update schema.json with locale strings from zotero.properties for the types and fields defined
// in schema.json
//
// This should be run from the submodule in the zotero/zotero repo after
// modifying types, fields, or localized strings.
//
// In addition, this will apply changes specified in schema-jurism-patch.json
// to schema.json to produce schema-jurism.json, the schema file that
// controls database creation and other structures in the Jurism derivative.
//
// [ZOTERO ORGINAL]
// This is generally run automatically by locale/run from the zotero-build repo.
//
// To add a new type or field, add it to schema.json, add the English string to zotero.properties,
// and run locale/run, which merges English strings, pulls translations from Transifex, and runs
// this script.
// [/ZOTERO ORIGINAL]

const path = require('path');
const fs = require('fs');

function getArrayObject(arr, label, val, ignoreEmpty) {
    for (var info of arr) {
        if (info[label] === val) {
            return info;
        }
    }
    if (ignoreEmpty) {
        return false;
    }
    throw new Error("Array does not contain object with value \"" + val + "\" for key " + label);
}

async function run() {
	var clientDir = path.join(__dirname, '..', '..', '..', '..');
	if (!fs.existsSync(path.join(clientDir, 'chrome'))) {
		console.error(`Not within a Zotero client directory`);
		process.exitCode = 1;
		return;
	}

	// Zotero source to be patched
	var oldJSON = fs.readFileSync('schema.json').toString();
	var data = JSON.parse(oldJSON);

    // WARNING: removing base field "publisher" from "institution"
    // on "report" to avoid data loss.
    for (var itemTypeInfo of data.itemTypes) {
        for (var fieldInfo of itemTypeInfo.fields) {
            if (["court", "legislativeBody", "issuingAuthority", "institution", "regulatoryBody", "documentNumber"].indexOf(fieldInfo.field) > -1) {
                console.log("Removing baseField from \"" + fieldInfo.field + "\"");
                delete fieldInfo.field.baseField;
            }
        }
    }
    
	// Remove stale CSL JSON mapping. Patch contains a substitute.
	delete data.csl.fields.text.journalAbbreviation
	
	// Previous Jurism schema, for version only
	var oldJurismJSON = fs.readFileSync('schema-jurism.json').toString();
	var oldJurismData = JSON.parse(oldJurismJSON);
	var version = parseInt(oldJurismData.version);

	// Patch info
    var patchJSON = fs.readFileSync('schema-jurism-patch.json').toString();
    var patch = JSON.parse(patchJSON);
	
// Apply Jurism changes

	// CSL fields
	var deletes = [];
    for (var cslField in patch.CSL_FIELDS) {
		if (patch.CSL_FIELDS[cslField].length == 0) {
			console.log("FLAGGING FOR DELETE");
			deletes.push(cslField);
		}
	}
	for (var cslField of deletes) {
		if (data.csl.fields.text[cslField]) {
			delete data.csl.fields.text[cslField];
		}
		delete patch.CSL_FIELDS[cslField];
	}
    for (var cslField in patch.CSL_FIELDS) {
        if (!data.csl.fields.text[cslField]) {
	        data.csl.fields.text[cslField] = [];
	    }
	    for (var zField of patch.CSL_FIELDS[cslField]) {
			if (data.csl.fields.text[cslField].indexOf(zField) === -1) {
				data.csl.fields.text[cslField].push(zField);
			}
		}
    }
    for (var cslDate in data.csl.fields.date) {
        if ("string" === typeof data.csl.fields.date[cslDate]) {
            data.csl.fields.date[cslDate] = [data.csl.fields.date[cslDate]];
        }
    }
    for (var cslDate in patch.CSL_DATES) {
        if (!data.csl.fields.date[cslDate]) {
	        data.csl.fields.date[cslDate] = [];
	    }
        for (var zDate of patch.CSL_DATES[cslDate]) {
	        if (data.csl.fields.date[cslDate].indexOf(zDate) === -1) {
	            data.csl.fields.date[cslDate].push(zDate);
	        }
        }
    }
    for (var zName in patch.CSL_NAMES) {
        var cslName = patch.CSL_NAMES[zName];
        data.csl.names[zName] = cslName;
    }

    // Types
    for (var type in patch.TYPES) {
        // Override if present
        for (var oldCslType in data.csl.types) {
            var idx = data.csl.types[oldCslType].indexOf(type);
            if (idx > -1) {
                data.csl.types[oldCslType] = data.csl.types[oldCslType].slice(0, idx).concat(data.csl.types[oldCslType].slice(idx+1));
            }
        }
        // Clone type base onto type in itemTypes
        if (!getArrayObject(data.itemTypes, "itemType", type, true)) {
            var base = patch.TYPES[type].zotero;
            if (base !== type) {
                var itemTypeInfo = getArrayObject(data.itemTypes, "itemType", base);
                var clone = JSON.parse(JSON.stringify(itemTypeInfo));
                clone.itemType = type;
                data.itemTypes.push(clone);
            }
        }
        // Add type entry
        data.csl.types[  patch.TYPES[type].csl ] = [ type ];
    }
    // Creators
	for (var zType in patch.CREATORS) {
	    for (var cslName of patch.CREATORS[zType]) {
		    if (!data.csl.names[cslName]) {
			    data.csl.names[cslName] = cslName;
			}
		}
	}
    for (var itemType in patch.CREATORS) {
        for (var creatorType of patch.CREATORS[itemType]) {
            var info = getArrayObject(data.itemTypes, "itemType", itemType);
            if (!getArrayObject(info.creatorTypes, "creatorType", creatorType, true)) {
                info.creatorTypes.push({
                    creatorType: creatorType
                });
            }
        }
        var first = info.creatorTypes.slice(0, 1);
        var remainder = info.creatorTypes.slice(1);
        var target = remainder.find(o => o.creatorType === "testimonyBy");
        if (target) {
            delete first[0].primary;
            remainder = first.concat(remainder.filter(o => o.creatorType !== "testimonyBy"));
            target.primary = true;
            first = [target];
            info.creatorTypes = first.concat(remainder);
        }
            
        
    }
    
    // Fields
	// Check for baseField as vanilla field on info.fields, and remove if present
	// (if left in place, the cross-duplicate will cause a test failure)
	// Also check for field on info.fields, and replace with patch object if present
	// (some fields [like institution] have base field assignments that need to be removed)

	for (var i in data.csl.fields.text.section) {
	   var cslVar = data.csl.fields.text.section[i];
	   if (cslVar === "committee") {
	       data.csl.fields.text.section = data.csl.fields.text.section.slice(0, i).concat(data.csl.fields.text.section.slice(i+1));
	   }
	}

    for (var itemType in patch.FIELDS) {
        var info = getArrayObject(data.itemTypes, "itemType", itemType);
        for (var field of patch.FIELDS[itemType]) {
			if (field.baseField && getArrayObject(info.fields, "field", field.baseField, true)) {
				var existingField = getArrayObject(info.fields, "field", field.baseField);
				Object.assign(existingField, field);
			} else if (field.field && getArrayObject(info.fields, "field", field.field, true)) {
				var existingField = getArrayObject(info.fields, "field", field.field);
				for (var key in existingField) {
					delete existingField[key];
					Object.assign(existingField, field);
				}
			} else {
				if (!getArrayObject(info.fields, "field", field.field, true)) {
            		info.fields.push(field);
            	}
			}
        }
    }
    // Dates
    var dateAcc = {};
	for (var itemType in patch.DATES) {
        var info = getArrayObject(data.itemTypes, "itemType", itemType);
        for (var field of patch.DATES[itemType]) {
            dateAcc[field] = true;
            if (!getArrayObject(info.fields, "field", field, true)) {
                info.fields.push({
                    field: field
                });
            }
        }
    }
    // Meta
    for (var date in dateAcc) {
        if (!data.meta.fields[date]) {
            data.meta.fields[date] = {
                type: "date"
            }
        }
    }
    // Sort
    for (var info of data.itemTypes) {
        var itemType = info.itemType;
        var fields = info.fields;
        var positions = {};
        for (var i in patch.SEQUENCE[itemType]) {
            var field = patch.SEQUENCE[itemType][i];
            positions[field] = parseInt(i, 10);
        }
        fields.sort(function(a,b){
            var aPos = positions[a.field];
            var bPos = positions[b.field];
            if (aPos > bPos) {
                return 1;
            } else if (aPos < bPos) {
                return -1;
            } else {
                return 0;
            }
        })
    }
    
	// Sort item types
	data.itemTypes.sort((a, b) => {
		return a.itemType.localeCompare(b.itemType);
	});
	
	// Regenerate localized strings using the files in chrome/locale
	data.locales = {};
	var itemTypes = data.itemTypes.map(x => x.itemType);
	var fields = Array.from(
		new Set(
			data.itemTypes.map(x => x.fields).reduce(
				(accumulator, currentValue) => {
					return accumulator.concat(currentValue.map(x => x.field));
				},
				[
					'itemType',
					// Base or primary fields used as search conditions
					'authority',
					'medium',
					'number',
					'dateAdded',
					'dateModified'
				]
			)
		)
	);
	var creatorTypes = Array.from(new Set(data.itemTypes.map(x => x.creatorTypes).reduce((accumulator, currentValue) => {
		return accumulator.concat(currentValue.map(x => x.creatorType));
	}, [])));
	var cmp = (a, b) => {
		return a.localeCompare(b, 'en', { sensitivity: 'base' });
	};
	itemTypes.sort(cmp);
	fields.sort(cmp);
	creatorTypes.sort(cmp);
	
	var dirs = fs.readdirSync(path.join(clientDir, 'chrome', 'locale'));
	for (let locale of dirs) {
		if (!/^[a-z]{2}(-[A-Z]{2})?/.test(locale)) {
			continue;
		}
		
		data.locales[locale] = {
			itemTypes: {},
			fields: {},
			creatorTypes: {}
		};
		
		// Read in zotero.properties file for locale
		let props = fs.readFileSync(
			path.join(clientDir, 'chrome', 'locale', locale, 'zotero', 'zotero.properties')
		);
		let lines = props.toString().split(/\n/g);
		let strings = new Map();
		for (let line of lines) {
			let [ key, str ] = line.split(/\s*=\s*/);
			if (!key) continue;
			strings.set(key, str);
		}
		
		data.locales[locale].itemTypes = getLocalizedStrings(locale, strings, 'itemTypes', itemTypes);
		data.locales[locale].fields = getLocalizedStrings(locale, strings, 'itemFields', fields);
		data.locales[locale].creatorTypes = getLocalizedStrings(locale, strings, 'creatorTypes', creatorTypes);
	}
	
	// Write new file with adjusted version
	var newJSON = JSON.stringify(data, null, '\t') + "\n";
	if (oldJSON != newJSON) {
		console.log("Schema updated");
		data.version = version + 1;
		newJSON = JSON.stringify(data, null, '\t') + "\n"
		fs.writeFileSync('schema-jurism.json', newJSON);
	}
	else {
		console.log("Schema hasn't changed");
	}
}

function getLocalizedStrings(locale, strings, prefix, subjects) {
	var data = {};
	for (let subject of subjects) {
		let key = prefix + '.' + subject;
		if (!strings.has(key)) {
			// 'type' is only a base field, so it doesn't have a string
			if (key == 'itemFields.type') {
				continue;
			}
			throw new Error(`Localized string ${key} missing for ${locale}. `
				+ "Did you update the en-US zotero.properties with new types and fields "
				+ "and merge the new English strings?\n");
		}
		data[subject] = strings.get(key);
	}
	return data;
}

(async function () {
	try {
		await run();
	}
	catch (e) {
		console.error(e);
	}
})();
